(define (count-change amount)
  (cc amount 5))
; Recursive method
(define (cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
        ((or (< amount 0) (= kinds-of-coins 0)) 0)
        (else (+ (cc amount
                     (- kinds-of-coins 1))
                 (cc (- amount
                        (first-denomination kinds-of-coins))
                     kinds-of-coins)))))
; Grabs the first denomination and works its way down the list
(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 4) 25)

; Ex: (cc 10 2)

(+ (cc 10 (- 2 1))
   (cc (- 10 5) 2))
(+ (cc 10 1) 
   (cc 5 2))
(+ 
  (+ (cc 10 0) (cc (- 10 1) 1))
  (+ (cc 5 1) (cc (- 5 5) 2)))
(+ 
  (+ 0 (cc 9 1))
  (+ (cc 5 1) (cc 0 2)))
