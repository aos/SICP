; Exercise 3.5
; Monte Carlo integration

(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))

(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
           (/ trials-passed trials))
          ((experiment)
           (iter (- trials-remaining 1)
                 (+ trials-passed 1)))
          (else
            (iter (- trials-remaining 1)
                  trials-passed))))
  (iter trials 0))

(define (test-predicate x y)
  (>= (square 3)
      (+ (square (- x 5))
         (square (- y 7)))))

; P -> predicate for testing
; x1 -> low, x2 -> high
; y1 -> low, y2 -> high
; Multiplying the fraction generated by the monte-carlo simulation by the area
; of the entire rectangle should produce an estimate of the integral
(define (estimate-integral P x1 x2 y1 y2 trials)
  (* (* (- x2 x1) (- y2 y1))
     (monte-carlo trials (lambda () (P (random-in-range x1 x2)
                                       (random-in-range y1 y2))))))

(estimate-integral test-predicate 2.0 8.0 4.0 10.0 100000)

; Use 'estimate-integral' to produce an estimate of Ï€
(define (estimate-pi trials)
  (/ (estimate-integral test-predicate 2.0 8.0 4.0 10.0 trials)
     (square 3)))
