; Exercise 3.82

(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))

(define (random-number-pairs low1 high1 low2 high2)
  (cons-stream (cons (random-in-range low1 high1)
                     (random-in-range low2 high2))))

(define (monte-carlo experiment-stream passed failed)
  (define (next passed failed)
    (cons-stream
      (/ passed (+ passed failed))
      (monte-carlo experiment-stream passed failed)))
  (if (stream-car experiment-stream)
      (next (+ passed 1) failed)
      (next passed (+ 1 failed 1))))

(define (test-predicate x y)
  (>= (square 3)
      (+ (square (- x 5))
         (square (- y 7)))))

; P -> predicate for testing
; x1 -> low, x2 -> high
; y1 -> low, y2 -> high
; Multiplying the fraction generated by the monte-carlo simulation by the area
; of the entire rectangle should produce an estimate of the integral
(define (estimate-integral P x1 x2 y1 y2)
  (let ((area (* (- x2 x1) (- y2 y1)))
        (randoms (random-number-pairs x1 x2 y1 y2)))
    (scale-stream (monte-carlo (stream-map P randoms) 0 0)
                  area)))

(estimate-integral test-predicate 2.0 8.0 4.0 10.0)
